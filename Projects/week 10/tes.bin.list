EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
tes.bin -- emu8086 assembler version: 4.08  
 
[ 08-Nov-21  --  09:29:34 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[   2]        :                                       ;		                                                                                      ;
[   3]        :                                       ;		Author: Md. Arafat Kabir Sun                                                          ;
[   4]        :                                       ;		Date: May 7, 2016																      ;
[   5]        :                                       ;                        																      ;
[   6]        :                                       ;		DESCRIPTIN:                                                                           ;
[   7]        :                                       ;			This example demonstrates the interfacing of 8086 with 16x2 LCD display.          ;
[   8]        :                                       ;			Coding is done in a modular fashion to make the codes reusable. Each logical      ;
[   9]        :                                       ;			operation is performed using corresponding procedures. The input-output           ;
[  10]        :                                       ;			parameters are mentioned at the top of the procedure definitions.                 ;
[  11]        :                                       ;			                                                                                  ;
[  12]        :                                       ;		NOTE:                                                                                 ;
[  13]        :                                       ;			Here delay loop is implemented using LOOP instruction. If the loop iterates       ;
[  14]        :                                       ;			for 50 times, at 1Mhz clock frequency, this corresponds to 1ms. The delay         ;
[  15]        :                                       ;			loops in this code are set using this convention.                                 ;
[  16]        :                                       ;                                                                                             ;
[  17]        :                                       ;                                                                                             ;
[  18]        :                                       ;                                                                                             ;
[  19]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[  20]        :                                       
[  21]        :                                       
[  22]        :                                       
[  23]        :                                       DATA SEGMENT
[  24]        :                                       ;variables to keep track of port data
[  25]    0000: 00                                    	PORTA_VAL DB 0
[  26]    0001: 00                                    PORTB_VAL DB 0
[  27]    0002: 00                                    PORTC_VAL DB 0
[  28]        :                                       
[  29]        :                                       ;sample string
[  30]    0003: 48 45 4C 4C 4F 20 57 4F 52 4C 44 24   MYSTR	DB	"HELLO WORLD$"
                                                    
[  31]    000F: 53 74 72 69 6E 67 20 30 31 24         STR1	DB	"String 01$"
[  32]    0019: 53 74 72 69 6E 67 20 30 32 24         STR2	DB	"String 02$"
[  33]        :                                       
[  34]        :                                       
[  35]        :                                       ;port addresses
[  36]        :                                       PORTA EQU 00H 	;PORTA IS CONNECTED TO THE D7-D0
[  37]        :                                       	PORTB EQU 02H 	;PORTB0 IS RW, PORTB1 IS RS, PORTB2 IS EN
[  38]        :                                       	PORTC EQU 04H
[  39]        :                                       	PCW   EQU 06H	;PORT FOR IO CONTROL
[  40]        :                                       
[  41]        :                                       ENDS
[  42]        :                                       
[  43]        :                                       STACK SEGMENT
[  44]    0030: 00 00 00 00 00 00 00 00 00 00 00 00   DW   128  DUP(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  45]        :                                       ENDS
[  46]        :                                       
[  47]        :                                       CODE SEGMENT
[  48]    0130:                                       START:
[  49]        :                                       ; set segment registers:
[  50]    0130: B8 00 00                              MOV AX, DATA
[  51]    0133: 8E D8                                 MOV DS, AX
[  52]    0135: 8E C0                                 MOV ES, AX
[  53]        :                                       
[  54]        :                                       ;define IO ports
[  55]    0137: BA 06 00                              MOV DX,PCW
[  56]    013A: B0 80                                 MOV AL,10000000B   ;to make all ports output
[  57]    013C: EE                                    OUT DX,AL
[  58]        :                                       
[  59]        :                                       ;XOR AL,AL
[  60]        :                                       ;BEGIN:
[  61]        :                                       ;	CALL OUT_B
[  62]        :                                       ;	MOV CX,5FFFH
[  63]        :                                       ;	CALL DELAY
[  64]        :                                       ;	INC AL
[  65]        :                                       	;JMP BEGIN
[  66]        :                                       	
[  67]        :                                       	;TEST_L:		
[  68]        :                                       	;	NOT AL
[  69]        :                                       	;	CALL OUT_C
[  70]        :                                       	;	MOV CX,50
[  71]        :                                       	;	@LTOP:
[  72]        :                                       	;	LOOP @LTOP
[  73]        :                                       	;JMP TEST_L
[  74]        :                                       		
[  75]        :                                       	;MOV CX,500
[  76]        :                                       	;CALL DELAY
[  77]        :                                       	
[  78]        :                                       	
[  79]        :                                       	
[  80]    013D: E8 51 00                              	CALL LCD_INIT	
[  81]        :                                       	;MOV AL,1H		;debug marker
[  82]        :                                       	;CALL OUT_C	
[  83]        :                                       	
[  84]        :                                       	
[  85]        :                                       	
[  86]    0140: B2 01                                 	MOV DL,1
[  87]    0142: B6 01                                 	MOV DH,1
[  88]    0144: E8 F6 00                              	CALL LCD_SET_CUR
[  89]        :                                       	;MOV AL,2H		;debug marker
[  90]        :                                       	;CALL OUT_C
[  91]        :                                       	
[  92]        :                                       	
[  93]        :                                       	
[  94]    0147: B4 41                                 	MOV AH,'A'
[  95]    0149: E8 BA 00                              	CALL LCD_WRITE_CHAR
[  96]    014C: B4 42                                 	MOV AH,'B'
[  97]    014E: E8 B5 00                              	CALL LCD_WRITE_CHAR
[  98]    0151: B4 43                                 	MOV AH,'C'
[  99]    0153: E8 B0 00                              	CALL LCD_WRITE_CHAR
[ 100]    0156: B4 44                                 	MOV AH,'D'
[ 101]    0158: E8 AB 00                              	CALL LCD_WRITE_CHAR	
[ 102]        :                                       	
[ 103]        :                                       	
[ 104]        :                                       	
[ 105]    015B: B2 02                                 	MOV DL,2
[ 106]    015D: B6 01                                 	MOV DH,1
[ 107]    015F: E8 DB 00                              	CALL LCD_SET_CUR
[ 108]    0162: BE 03 00                              	LEA SI,MYSTR
[ 109]    0165: E8 C4 00                              	CALL LCD_PRINTSTR	
[ 110]        :                                       	;MOV AL,3H		;debug marker
[ 111]        :                                       	;CALL OUT_C
[ 112]        :                                       	
[ 113]    0168: B9 60 EA                              	MOV CX,60000
[ 114]    016B: E8 1E 00                              	CALL DELAY
[ 115]        :                                       	
[ 116]    016E: E8 8F 00                              	CALL LCD_CLEAR
[ 117]        :                                       	
[ 118]    0171: B2 01                                 	MOV DL,1
[ 119]    0173: B6 01                                 	MOV DH,1
[ 120]    0175: E8 C5 00                              	CALL LCD_SET_CUR
[ 121]    0178: BE 0F 00                              	LEA SI,STR1
[ 122]    017B: E8 AE 00                              	CALL LCD_PRINTSTR
[ 123]        :                                       	
[ 124]        :                                       	
[ 125]    017E: B2 02                                 	MOV DL,2
[ 126]    0180: B6 01                                 	MOV DH,1
[ 127]    0182: E8 B8 00                              	CALL LCD_SET_CUR
[ 128]    0185: BE 19 00                              	LEA SI,STR2
[ 129]    0188: E8 A1 00                              	CALL LCD_PRINTSTR
[ 130]        :                                       	
[ 131]        :                                       	  	
[ 132]        :                                       
[ 133]    018B: F4                                    	HLT
[ 134]        :                                       ;end of main procedure
[ 135]        :                                       
[ 136]        :                                       
[ 137]        :                                       
[ 138]        :                                       
[ 139]        :                                       
[ 140]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 141]        :                                       ;                                    ;
[ 142]        :                                       ;		LCD function library.        ;
[ 143]        :                                       ;                                    ;
[ 144]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 145]    018C:                                       PROC DELAY
[ 146]        :                                       ;input: CX, this value controls the delay. CX=50 means 1ms
[ 147]        :                                       ;output: none
[ 148]    018C: E3 02                                 	JCXZ @DELAY_END
[ 149]    018E:                                       	@DEL_LOOP:
[ 150]    018E: E2 FE                                 	LOOP @DEL_LOOP	
[ 151]    0190:                                       	@DELAY_END:
[ 152]    0190: C3                                    	RET
[ 153]        :                                       ENDP DELAY
[ 154]        :                                       
[ 155]        :                                       
[ 156]        :                                       
[ 157]        :                                       ; LCD initialization
[ 158]    0191:                                       PROC LCD_INIT
[ 159]        :                                       ;input: none
[ 160]        :                                       ;output: none
[ 161]        :                                       
[ 162]        :                                       ;make RS=En=RW=0
[ 163]    0191: B0 00                                 	MOV AL,0
[ 164]    0193: E8 DF 00                              	CALL OUT_B
[ 165]        :                                       ;delay 20ms
[ 166]    0196: B9 E8 03                              	MOV CX,1000
[ 167]    0199: E8 F0 FF                              	CALL DELAY
[ 168]        :                                       ;reset sequence
[ 169]    019C: B4 30                                 	MOV AH,30H
[ 170]    019E: E8 31 00                              	CALL LCD_CMD
[ 171]    01A1: B9 FA 00                              	MOV CX,250
[ 172]    01A4: E8 E5 FF                              	CALL DELAY
[ 173]        :                                       	
[ 174]    01A7: B4 30                                 	MOV AH,30H
[ 175]    01A9: E8 26 00                              	CALL LCD_CMD
[ 176]    01AC: B9 32 00                              	MOV CX,50
[ 177]    01AF: E8 DA FF                              	CALL DELAY
[ 178]        :                                       	
[ 179]    01B2: B4 30                                 	MOV AH,30H
[ 180]    01B4: E8 1B 00                              	CALL LCD_CMD
[ 181]    01B7: B9 F4 01                              	MOV CX,500
[ 182]    01BA: E8 CF FF                              	CALL DELAY
[ 183]        :                                       	
[ 184]        :                                       ;function set
[ 185]    01BD: B4 38                                 	MOV AH,38H
[ 186]    01BF: E8 10 00                              	CALL LCD_CMD
[ 187]        :                                       	
[ 188]    01C2: B4 0C                                 	MOV AH,0CH
[ 189]    01C4: E8 0B 00                              	CALL LCD_CMD
[ 190]        :                                       	
[ 191]    01C7: B4 01                                 	MOV AH,01H
[ 192]    01C9: E8 06 00                              	CALL LCD_CMD
[ 193]        :                                       	
[ 194]    01CC: B4 06                                 	MOV AH,06H
[ 195]    01CE: E8 01 00                              	CALL LCD_CMD
[ 196]        :                                       	
[ 197]    01D1: C3                                    	RET	
[ 198]        :                                       ENDP LCD_INIT
[ 199]        :                                       
[ 200]        :                                       
[ 201]        :                                       
[ 202]        :                                       
[ 203]        :                                       ;sends commands to LCD
[ 204]    01D2:                                       PROC LCD_CMD
[ 205]        :                                       ;input: AH = command code
[ 206]        :                                       ;output: none
[ 207]        :                                       
[ 208]        :                                       ;save registers
[ 209]    01D2: 52                                    	PUSH DX
[ 210]    01D3: 50                                    	PUSH AX
[ 211]        :                                       ;make rs=0
[ 212]    01D4: A0 01 00                              	MOV AL,PORTB_VAL
[ 213]    01D7: 24 FD                                 	AND AL,0FDH		;En-RS-RW
[ 214]    01D9: E8 99 00                              	CALL OUT_B
[ 215]        :                                       ;set out data pins
[ 216]    01DC: 8A C4                                 	MOV AL,AH
[ 217]    01DE: E8 8A 00                              	CALL OUT_A
[ 218]        :                                       ;make En=1
[ 219]    01E1: A0 01 00                              	MOV AL,PORTB_VAL
[ 220]    01E4: 0C 04                                 	OR	AL,100B		;En-RS-RW
[ 221]    01E6: E8 8C 00                              	CALL OUT_B
[ 222]        :                                       ;delay 1ms
[ 223]    01E9: B9 32 00                              	MOV CX,50
[ 224]    01EC: E8 9D FF                              	CALL DELAY
[ 225]        :                                       ;make En=0
[ 226]    01EF: A0 01 00                              	MOV AL,PORTB_VAL
[ 227]    01F2: 24 FB                                 	AND AL,0FBH		;En-RS-RW
[ 228]    01F4: E8 7E 00                              	CALL OUT_B
[ 229]        :                                       ;delay 1ms
[ 230]    01F7: B9 32 00                              	MOV CX,50
[ 231]    01FA: E8 8F FF                              	CALL DELAY
[ 232]        :                                       ;restore registers
[ 233]    01FD: 58                                    	POP AX
[ 234]    01FE: 5A                                    	POP DX	
[ 235]    01FF: C3                                    	RET
[ 236]        :                                       ENDP LCD_CMD
[ 237]        :                                       
[ 238]        :                                       
[ 239]        :                                       
[ 240]        :                                       
[ 241]    0200:                                       PROC LCD_CLEAR
[ 242]    0200: B4 01                                 	MOV AH,1
[ 243]    0202: E8 CD FF                              	CALL LCD_CMD
[ 244]    0205: C3                                    	RET	
[ 245]        :                                       ENDP LCD_CLEAR
[ 246]        :                                       
[ 247]        :                                       
[ 248]        :                                       
[ 249]        :                                       ;writes a character on current cursor position
[ 250]    0206:                                       PROC LCD_WRITE_CHAR
[ 251]        :                                       ;input: AH
[ 252]        :                                       ;output: none
[ 253]        :                                       
[ 254]        :                                       ;save registers
[ 255]    0206: 50                                    	PUSH AX
[ 256]        :                                       ;set RS=1
[ 257]    0207: A0 01 00                              	MOV AL,PORTB_VAL
[ 258]    020A: 0C 02                                 	OR	AL,10B		;EN-RS-RW
[ 259]    020C: E8 66 00                              	CALL OUT_B
[ 260]        :                                       ;set out the data pins
[ 261]    020F: 8A C4                                 	MOV AL,AH
[ 262]    0211: E8 57 00                              	CALL OUT_A
[ 263]        :                                       ;set En=1
[ 264]    0214: A0 01 00                              	MOV AL,PORTB_VAL
[ 265]    0217: 0C 04                                 	OR	AL,100B		;EN-RS-RW
[ 266]    0219: E8 59 00                              	CALL OUT_B
[ 267]        :                                       ;delay 1ms
[ 268]    021C: B9 32 00                              	MOV CX,50
[ 269]    021F: E8 6A FF                              	CALL DELAY
[ 270]        :                                       ;set En=0
[ 271]    0222: A0 01 00                              	MOV AL,PORTB_VAL
[ 272]    0225: 24 FB                                 	AND	AL,0FBH		;EN-RS-RW
[ 273]    0227: E8 4B 00                              	CALL OUT_B
[ 274]        :                                       ;return
[ 275]    022A: 58                                    	POP AX
[ 276]    022B: C3                                    	RET	
[ 277]        :                                       ENDP LCD_WRITE_CHAR
[ 278]        :                                       
[ 279]        :                                       
[ 280]        :                                       
[ 281]        :                                       
[ 282]        :                                       
[ 283]        :                                       ;prints a string on current cursor position
[ 284]    022C:                                       PROC LCD_PRINTSTR
[ 285]        :                                       ;input: SI=string address, string should end with '$'
[ 286]        :                                       ;output: none
[ 287]        :                                       
[ 288]        :                                       ;save registers
[ 289]    022C: 56                                    	PUSH SI
[ 290]    022D: 50                                    	PUSH AX
[ 291]        :                                       ;read and write character
[ 292]    022E:                                       	@LCD_PRINTSTR_LT:
[ 293]    022E: AC                                    		LODSB
[ 294]    022F: 3C 24                                 		CMP AL,'$'
[ 295]    0231: 74 07                                 		JE @LCD_PRINTSTR_EXIT
[ 296]    0233: 8A E0                                 		MOV AH,AL
[ 297]    0235: E8 CE FF                              		CALL LCD_WRITE_CHAR	
[ 298]    0238: EB F4                                 	JMP @LCD_PRINTSTR_LT
[ 299]        :                                       	
[ 300]        :                                       ;return
[ 301]    023A:                                       	@LCD_PRINTSTR_EXIT:
[ 302]    023A: 58                                    	POP AX
[ 303]    023B: 5E                                    	POP SI
[ 304]    023C: C3                                    	RET	
[ 305]        :                                       ENDP LCD_PRINTSTR
[ 306]        :                                       
[ 307]        :                                       
[ 308]        :                                       
[ 309]        :                                       
[ 310]        :                                       ;sets the cursor
[ 311]    023D:                                       PROC LCD_SET_CUR
[ 312]        :                                       ;input: DL=ROW, DH=COL
[ 313]        :                                       ;		DL = 1, means upper row
[ 314]        :                                       ;		DL = 2, means lower row
[ 315]        :                                       ;		DH = 1-8, 1st column is 1
[ 316]        :                                       ;output: none
[ 317]        :                                       
[ 318]        :                                       ;save registers
[ 319]    023D: 50                                    	PUSH AX
[ 320]        :                                       ;LCD uses 0 based column index
[ 321]    023E: FE CE                                 	DEC DH
[ 322]        :                                       ;select case	
[ 323]    0240: 80 FA 01                              	CMP DL,1
[ 324]    0243: 74 07                                 	JE	@ROW1
[ 325]    0245: 80 FA 02                              	CMP DL,2
[ 326]    0248: 74 06                                 	JE	@ROW2
[ 327]    024A: EB 0D                                 	JMP @LCD_SET_CUR_END
[ 328]        :                                       	
[ 329]        :                                       ;if DL==1 then
[ 330]    024C:                                       	@ROW1:
[ 331]    024C: B4 80                                 		MOV AH,80H
[ 332]    024E: EB 04                                 	JMP @LCD_SET_CUR_ENDCASE
[ 333]        :                                       	
[ 334]        :                                       ;if DL==2 then
[ 335]    0250:                                       	@ROW2:
[ 336]    0250: B4 C0                                 		MOV AH,0C0H
[ 337]    0252: EB 00                                 	JMP @LCD_SET_CUR_ENDCASE
[ 338]        :                                       		
[ 339]        :                                       ;execute the command
[ 340]    0254:                                       	@LCD_SET_CUR_ENDCASE:	
[ 341]    0254: 02 E6                                 	ADD AH,DH
[ 342]    0256: E8 79 FF                              	CALL LCD_CMD
[ 343]        :                                       	
[ 344]        :                                       ;exit from procedure
[ 345]    0259:                                       	@LCD_SET_CUR_END:
[ 346]    0259: 58                                    	POP AX
[ 347]    025A: C3                                    	RET
[ 348]        :                                       ENDP LCD_SET_CUR
[ 349]        :                                       
[ 350]        :                                       
[ 351]        :                                       
[ 352]        :                                       
[ 353]        :                                       
[ 354]        :                                       
[ 355]    025B:                                       PROC LCD_SHOW_CUR
[ 356]        :                                       ;input: none
[ 357]        :                                       ;output: none
[ 358]    025B: 50                                    	PUSH AX
[ 359]    025C: B4 0F                                 	MOV AH,0FH
[ 360]    025E: E8 71 FF                              	CALL LCD_CMD
[ 361]    0261: 58                                    	POP AX
[ 362]    0262: C3                                    	RET
[ 363]        :                                       ENDP LCD_SHOW_CUR
[ 364]        :                                       
[ 365]        :                                       
[ 366]        :                                       
[ 367]        :                                       
[ 368]    0263:                                       PROC LCD_HIDE_CUR
[ 369]        :                                       ;input: none
[ 370]        :                                       ;output: none
[ 371]    0263: 50                                    	PUSH AX
[ 372]    0264: B4 0C                                 	MOV AH,0CH
[ 373]    0266: E8 69 FF                              	CALL LCD_CMD
[ 374]    0269: 58                                    	POP AX
[ 375]    026A: C3                                    	RET
[ 376]        :                                       ENDP LCD_HIDE_CUR
[ 377]        :                                       
[ 378]        :                                       
[ 379]        :                                       
[ 380]        :                                       ;sends data to output port and saves them in a variable
[ 381]    026B:                                       PROC OUT_A
[ 382]        :                                       ;input: AL
[ 383]        :                                       ;output: PORTA_VAL
[ 384]    026B: 52                                    	PUSH DX
[ 385]    026C: BA 00 00                              	MOV DX,PORTA
[ 386]    026F: EE                                    	OUT DX,AL
[ 387]    0270: A2 00 00                              	MOV PORTA_VAL,AL
[ 388]    0273: 5A                                    	POP DX
[ 389]    0274: C3                                    	RET	
[ 390]        :                                       ENDP OUT_A
[ 391]        :                                       
[ 392]        :                                       
[ 393]    0275:                                       PROC OUT_B
[ 394]        :                                       ;input: AL
[ 395]        :                                       ;output: PORTB_VAL	
[ 396]    0275: 52                                    	PUSH DX
[ 397]    0276: BA 02 00                              	MOV DX,PORTB
[ 398]    0279: EE                                    	OUT DX,AL
[ 399]    027A: A2 01 00                              	MOV PORTB_VAL,AL
[ 400]    027D: 5A                                    	POP DX
[ 401]    027E: C3                                    	RET
[ 402]        :                                       ENDP OUT_B
[ 403]        :                                       
[ 404]    027F:                                       PROC OUT_C
[ 405]        :                                       ;input: AL
[ 406]        :                                       ;output: PORTC_VAL	
[ 407]    027F: 52                                    	PUSH DX
[ 408]    0280: BA 04 00                              	MOV DX,PORTC
[ 409]    0283: EE                                    	OUT DX,AL
[ 410]    0284: A2 02 00                              	MOV PORTC_VAL,AL
[ 411]    0287: 5A                                    	POP DX
[ 412]    0288: C3                                    	RET
[ 413]        :                                       ENDP OUT_C
[ 414]        :                                       
[ 415]        :                                       
[ 416]        :                                       
[ 417]        :                                       CODE ENDS ;end of CODE segment
[ 418]        :                                       END START ; set entry point and stop the assembler.
[ 419]        :                                       
[ 420]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 89      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 03      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 03      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: BA      -   check sum (l.byte)
0013: 18      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 13      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 13      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
