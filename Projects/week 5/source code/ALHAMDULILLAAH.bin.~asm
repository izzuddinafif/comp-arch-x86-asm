#make_bin#

; BIN is plain binary format similar to .com format, but not limited to 1 segment;
; All values between # are directives, these values are saved into a separate .binf file.
; Before loading .bin file emulator reads .binf file with the same file name.

; All directives are optional, if you don't need them, delete them.

; set loading address, .bin file will be loaded to this address:
#LOAD_SEGMENT=0500h#
#LOAD_OFFSET=0000h#

; set entry point:
#CS=0500h#    ; same as loading segment
#IP=0000h#    ; same as loading offset

; set segment registers
#DS=0500h#    ; same as loading segment
#ES=0500h#    ; same as loading segment

; set stack
#SS=0500h#    ; same as loading segment
#SP=FFFEh#    ; set to top of loading segment

; set general registers (optional)
#AX=0000h#
#BX=0000h#
#CX=0000h#
#DX=0000h#
#SI=0000h#
#DI=0000h#
#BP=0000h#

; add your code here
DATA SEGMENT
PORTA EQU 00H
PORTB EQU 02H
PORTC EQU 04H
PORT_CON EQU 06H
DATA ENDS

CODE SEGMENT
MOV AX,DATA
MOV DS,AX

org 0000h


;add your code here
START:
MOV DX, PORT_CON
MOV AL, 10000000B; PORT A as Output
OUT DX, AL

XX:

CALL P0
CALL P1
CALL P2
CALL P3
CALL P4
CALL P5
CALL P6
CALL P7
CALL P8
CALL P9
RET

XS PROC

MOV AL, 00111111B ; displaying 0
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay0:loop Delay0

MOV AL, 00000110B ; displaying 1
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay1:loop Delay1

MOV AL, 01011011B ; displaying 2
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay2:loop Delay2

MOV AL, 01001111B ; displaying 3
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay3:loop Delay3

MOV AL, 01100110B ; displaying 4
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay4:loop Delay4

MOV AL, 01101101B ; displaying 5
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay5:loop Delay5

MOV AL, 01111101B ; displaying 6
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay6:loop Delay6

MOV AL, 00000111B ; displaying 7
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay7:loop Delay7

MOV AL, 01111111B ; displaying 8
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay8:loop Delay8

MOV AL, 01101111B ; displaying 9
MOV DX, PORTA
OUT DX,AL
MOV CX,0DF36H; Delay
Delay9:loop Delay9

RET
XS ENDP

P0 PROC
MOV AL, 00111111B ; displaying 0
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P0 ENDP

P1 PROC
MOV AL, 00000110B ; displaying 1
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P1 ENDP

P2 PROC
MOV AL, 01011011B ; displaying 2
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P2 ENDP

P3 PROC
MOV AL, 01001111B ; displaying 3
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P3 ENDP

P4 PROC
MOV AL, 01100110B ; displaying 4
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P4 ENDP

P5 PROC
MOV AL, 01101101B ; displaying 5
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P5 ENDP

P6 PROC
MOV AL, 01111101B ; displaying 6
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P6 ENDP

P7 PROC
MOV AL, 00000111B ; displaying 7
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P7 ENDP

P8 PROC
MOV AL, 01111111B ; displaying 8
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P8 ENDP

P9 PROC
MOV AL, 01101111B ; displaying 9
MOV DX, PORTB
OUT DX,AL
CALL XS
RET
P9 ENDP

JMP XX

JMP START

CODE ENDS
END


HLT           ; halt!






; [SOURCE]: C:\Users\izzud\Downloads\2421600004.asm




; [SOURCE]: D:\Cool Yeah\Internet Engineering Technology\1st Semester\Computer Architecture\Projects\week 5\source code\normal.bin.asm
