EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
GASGDSA.bin -- emu8086 assembler version: 4.08  
 
[ 10-Oct-21  --  10:03:04 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       #make_bin#
[   2]        :                                       
[   3]        :                                       ; BIN is plain binary format similar to .com format, but not limited to 1 segment;
[   4]        :                                       ; All values between # are directives, these values are saved into a separate .binf file.
[   5]        :                                       ; Before loading .bin file emulator reads .binf file with the same file name.
[   6]        :                                       
[   7]        :                                       ; All directives are optional, if you don't need them, delete them.
[   8]        :                                       
[   9]        :                                       ; set loading address, .bin file will be loaded to this address:
[  10]        :                                       #LOAD_SEGMENT=0500h#
[  11]        :                                       #LOAD_OFFSET=0000h#
[  12]        :                                       
[  13]        :                                       ; set entry point:
[  14]        :                                       #CS=0500h#	; same as loading segment
[  15]        :                                       #IP=0000h#	; same as loading offset
[  16]        :                                       
[  17]        :                                       ; set segment registers
[  18]        :                                       #DS=0500h#	; same as loading segment
[  19]        :                                       #ES=0500h#	; same as loading segment
[  20]        :                                       
[  21]        :                                       ; set stack
[  22]        :                                       #SS=0500h#	; same as loading segment
[  23]        :                                       #SP=FFFEh#	; set to top of loading segment
[  24]        :                                       
[  25]        :                                       ; set general registers (optional)
[  26]        :                                       #AX=0000h#
[  27]        :                                       #BX=0000h#
[  28]        :                                       #CX=0000h#
[  29]        :                                       #DX=0000h#
[  30]        :                                       #SI=0000h#
[  31]        :                                       #DI=0000h#
[  32]        :                                       #BP=0000h#
[  33]        :                                       
[  34]        :                                       ; add your code here
[  35]        :                                       DATA SEGMENT
[  36]        :                                       PORTA EQU 00H
[  37]        :                                       PORTB EQU 02H
[  38]        :                                       PORTC EQU 04H
[  39]        :                                       PORTCON EQU 06H
[  40]        :                                       DATA ENDS
[  41]        :                                       
[  42]        :                                       CODE SEGMENT
[  43]    0000: B8 00 00                              MOV AX,DATA
[  44]    0003: 8E D8                                 MOV DS,AX
[  45]        :                                       
[  46]    0005: BA 06 00                              MOV DX,PORTCON
[  47]    0008: B0 90                                 MOV AL,10010000B
[  48]    000A: EE                                    OUT DX,AL
[  49]        :                                       
[  50]    000B:                                       DELAY PROC
[  51]    000B: B9 FF 00                              MOV CX,00FFH
[  52]    000E:                                       LOOPX:
[  53]    000E: E2 FE                                 LOOP LOOPX
[  54]    0010: C3                                    RET
[  55]        :                                       DELAY ENDP
[  56]        :                                       
[  57]    0011:                                       START:
[  58]    0011: BA 00 00                              MOV DX,PORTA
[  59]    0014: B0 AA                                 MOV AL, 10101010B
[  60]    0016: EE                                    OUT DX,AL
[  61]        :                                       
[  62]    0017: EB F8                                 JMP START
[  63]        :                                       
[  64]        :                                       CODE ENDS
[  65]        :                                       
[  66]        :                                       END
[  67]        :                                       HLT           ; halt!
[  68]        :                                       
 
===================================================================================================
 




===================================================================================================
