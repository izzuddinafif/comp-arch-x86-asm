EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
ssssssss.bin -- emu8086 assembler version: 4.08  
 
[ 20-Sep-21  --  12:37:00 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       #make_bin#
[   2]        :                                       
[   3]        :                                       ; BIN is plain binary format similar to .com format, but not limited to 1 segment;
[   4]        :                                       ; All values between # are directives, these values are saved into a separate .binf file.
[   5]        :                                       ; Before loading .bin file emulator reads .binf file with the same file name.
[   6]        :                                       
[   7]        :                                       ; All directives are optional, if you don't need them, delete them.
[   8]        :                                       
[   9]        :                                       ; set loading address, .bin file will be loaded to this address:
[  10]        :                                       #LOAD_SEGMENT=0500h#
[  11]        :                                       #LOAD_OFFSET=0000h#
[  12]        :                                       
[  13]        :                                       ; set entry point:
[  14]        :                                       #CS=0500h#    ; same as loading segment
[  15]        :                                       #IP=0000h#    ; same as loading offset
[  16]        :                                       
[  17]        :                                       ; set segment registers
[  18]        :                                       #DS=0500h#    ; same as loading segment
[  19]        :                                       #ES=0500h#    ; same as loading segment
[  20]        :                                       
[  21]        :                                       ; set stack
[  22]        :                                       #SS=0500h#    ; same as loading segment
[  23]        :                                       #SP=FFFEh#    ; set to top of loading segment
[  24]        :                                       
[  25]        :                                       ; set general registers (optional)
[  26]        :                                       #AX=0000h#
[  27]        :                                       #BX=0000h#
[  28]        :                                       #CX=0000h#
[  29]        :                                       #DX=0000h#
[  30]        :                                       #SI=0000h#
[  31]        :                                       #DI=0000h#
[  32]        :                                       #BP=0000h#
[  33]        :                                       
[  34]        :                                       ; add your code here
[  35]        :                                       DATA SEGMENT
[  36]        :                                       PORTA EQU 00H
[  37]        :                                       PORT_CON EQU 06H
[  38]        :                                       DATA ENDS
[  39]        :                                       
[  40]        :                                       CODE SEGMENT
[  41]    0005: BA 06 00                              MOV AX,DATA
[  42]    0008: B0 80                                 MOV DS,AX
[  43]        :                                       
[  44]        :                                       org 0000h
[  45]        :                                       
[  46]        :                                       
[  47]        :                                       ;add your code here
[  48]    0005:                                       START:
[  49]        :                                       
[  50]    0005: BA 06 00                              MOV DX, PORT_CON; moving control port adress to dx
[  51]    0008: B0 80                                 MOV AL, 10000000B; PORT A, PORT B, PORT C as output
[  52]    000A: EE                                    OUT DX, AL; transfer byte from al to control port in dx
[  53]        :                                       
[  54]    000B: EB 14                                 JMP loopy2
[  55]        :                                       
[  56]    000D:                                       XX:
[  57]    000D: B0 00                                 MOV AL, 0000H; OFF STATE coz 0h points to nothing
[  58]    000F: BA 00 00                              MOV DX, PORTA; move port a to register dx
[  59]    0012: EE                                    OUT DX, AL   ; move 0h to register dx
[  60]    0013: B9 36 DF                              MOV CX, 0DF36H; Delay by moving h value to counter register
[  61]        :                                       
[  62]    0016: E2 FE                                 loopy1:loop loopy1;17*cx-12
[  63]    0018: B0 81                                 MOV AL, 0081H; ON STATE coz 81h points to both 1st and 1st and 8th x port
[  64]    001A: BA 00 00                              MOV DX, PORTA; move port a to register dx
[  65]    001D: EE                                    OUT DX, AL   ; move 81h to register dx, so its ap0 and ap7 that are gonna be lit.
[  66]    001E: B9 36 DF                              MOV CX, 0DF36H; Delay by moving h value to counter register
[  67]        :                                       ;4+4+10+4 clocks
[  68]        :                                       
[  69]    0021: E2 FE                                 loopy2:loop loopy2
[  70]    0023: EB E8                                 JMP XX; by jmping back, we create an infinite loop.
[  71]        :                                       
[  72]        :                                       CODE ENDS
[  73]        :                                       END
[  74]        :                                       
[  75]        :                                       HLT           ; halt!
[  76]        :                                       
[  77]        :                                       
[  78]        :                                       
[  79]        :                                       
[  80]        :                                       
[  81]        :                                       
[  82]        :                                       ; [SOURCE]: C:\emu8086\MySource\mycode.asm
[  83]        :                                       
[  84]        :                                       
 
===================================================================================================
 




===================================================================================================
